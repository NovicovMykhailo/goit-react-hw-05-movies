{"version":3,"file":"static/js/650.e9952526.chunk.js","mappings":"iRACA,EAAuB,mBAAvB,EAAkD,oBAAlD,EAAsF,4BAAtF,EAA8H,wBAA9H,EAA6J,mBAA7J,EAA4L,wBAA5L,EAAiO,yBAAjO,EAAkQ,oB,SCuBlQ,EAtBiB,SAAC,GAA8B,IAA5BA,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvBC,EAAoCH,EAApCG,KAAMC,EAA8BJ,EAA9BI,WAAYC,EAAkBL,EAAlBK,UAAWC,EAAON,EAAPM,GAOrC,OACE,gBAAIC,UAAWC,EAAeN,QANhC,WACM,OAAOA,EAAQI,EAEpB,EAGC,WACE,cAAGC,UAAWC,EAAd,SAA0BP,EAAQ,KAClC,eAAIM,UAAWC,EAAf,mBAA6BL,KAC5BE,IACC,gBAAIE,UAAWC,EAAeC,MAAOJ,EAArC,UAAgD,OACzCA,MAGT,eAAGE,UAAWC,EAAd,UAA+BE,OAAOC,WAAWP,GAAYQ,QAAQ,GAAG,eAG7E,E,oBCuCD,EAlDa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BP,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACA,GAA8BV,EAAAA,EAAAA,UAAS,MAAvC,eAAOW,EAAP,KAAgBC,EAAhB,KAiBA,SAASC,EAAQC,GACXA,GAAKF,EAAWE,GAClBJ,GAAW,SAAAK,GAAI,OAAKA,CAAL,GAElB,CAED,OArBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,qFACCZ,EAAU,WADX,kBAGSa,EAAAA,GAAmBV,GAASW,MAAK,SAAAC,GACrCjB,EAAQiB,GACRf,EAAU,WACX,IANJ,uDAQGE,EAAW,EAAD,IACVF,EAAU,YATb,wDAAD,EAYD,GAAE,CAACG,IAQW,YAAXJ,GAA6B,SAACiB,EAAA,EAAD,IAClB,aAAXjB,GAA8B,SAACkB,EAAA,EAAD,CAAOhB,QAASA,IACnC,aAAXF,GAEA,iBAAKT,UAAWC,EAAhB,UACGc,IAAW,SAACa,EAAA,EAAD,CAAOT,QAASA,EAAhB,UAA0B,SAACU,EAAA,EAAD,CAAWT,KAAMH,OACvD,eAAIjB,UAAWC,EAAf,SAA0B,UAE1B,eAAID,UAAWC,EAAf,UACE,SAAC,EAAA6B,SAAD,CAAUC,UAAU,SAACL,EAAA,EAAD,IAApB,SACGnB,EAAKyB,KAAI,SAACvC,EAAMC,GACf,OAAID,EAAKwC,cAAqB,SAAC,EAAD,CAAUxC,KAAMA,EAAoBC,MAAOA,EAAOC,QAASwB,GAAhC1B,EAAKM,IACvD,EACR,gBAXX,CAiBD,C,oCCzCD,IAlBc,SAAC,GAAe,IAAdY,EAAa,EAAbA,QACd,OACE,iBACEuB,MAAO,CACLC,OAAQ,QACRC,MAAO,OACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,aACZC,cAAe,SACfC,IAAK,QART,WAWE,wBAAI,gCACH9B,IAAW,yBAAG,sBAAKA,EAAQ,0BAGjC,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/CastCard.jsx","components/Cast/Cast.jsx","components/Error/Error.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__m5y0R\",\"title\":\"Cast_title__0cH9s\",\"listContainer\":\"Cast_listContainer__LPg1R\",\"actorCard\":\"Cast_actorCard__1vCPH\",\"name\":\"Cast_name__6UbFm\",\"character\":\"Cast_character__tKDlA\",\"popularity\":\"Cast_popularity__6+xwh\",\"index\":\"Cast_index__+imOM\"};","import css from './Cast.module.css'\n\nconst CastCard = ({ item, index, onClick }) => {\n  const { name, popularity, character, id } = item\n\n  function handleClick() {\n        return onClick(id)\n\n  }    \n\n  return (\n    <li className={css.actorCard} onClick={handleClick}>\n      <p className={css.index}>{index + 1}</p>\n      <h3 className={css.name}>{`${name}`}</h3>\n      {character && (\n        <h4 className={css.character} title={character}>\n          as: {character}\n        </h4>\n      )}\n      <p className={css.popularity}>{Number.parseFloat(popularity).toFixed(1)} ☆</p>\n    </li>\n  );\n};\n\nexport default CastCard;\n","import { Suspense, useEffect, useState } from 'react';\nimport * as API from '../../services/themoviedb_API';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\n\nimport css from './Cast.module.css';\nimport CastCard from './CastCard';\nimport Modal from 'components/Modal/Modal';\nimport ModalCard from 'components/Modal/ModalCard';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [message, setMessage] = useState('');\n  const { movieId } = useParams();\n  const [isModal, setIsModal] = useState(false);\n  const [modalId, setModalId] = useState(null)\n\n  useEffect(() => {\n    (async () => {\n      setStatus('pending');\n      try {\n        await API.getMovieActors(movieId).then(reviews => {\n          setCast(reviews);\n          setStatus('resolved');\n        });\n      } catch (error) {\n        setMessage(error);\n        setStatus('rejected');\n      }\n    })();\n  }, [movieId]);\n\n  function onClose(data) {\n    if (data)setModalId(data)\n      setIsModal(prev => !prev);\n \n  }\n\n  if (status === 'pending') return <Loader />;\n  if (status === 'rejected') return <Error message={message} />;\n  if (status === 'resolved') {\n    return (\n      <div className={css.cast}>\n        {isModal && <Modal onClose={onClose}>{<ModalCard data={modalId} />}</Modal>}\n        <h3 className={css.title}>Cast</h3>\n\n        <ol className={css.listContainer}>\n          <Suspense fallback={<Loader />}>\n            {cast.map((item, index) => {\n              if (item.profile_path) return <CastCard item={item} key={item.id} index={index} onClick={onClose} />;\n              return ''\n            })}\n          </Suspense>\n        </ol>\n      </div>\n    );\n  }\n};\n\nexport default Cast;\n","const Error = ({message}) => {\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        gap: '20px',\n      }}\n    >\n      <h1>Oops somethin went wrong...</h1>\n      {message && <p>••• {message}•••</p>}\n    </div>\n  );\n};\nexport default Error;\n"],"names":["item","index","onClick","name","popularity","character","id","className","css","title","Number","parseFloat","toFixed","useState","cast","setCast","status","setStatus","message","setMessage","movieId","useParams","isModal","setIsModal","modalId","setModalId","onClose","data","prev","useEffect","API","then","reviews","Loader","Error","Modal","ModalCard","Suspense","fallback","map","profile_path","style","height","width","display","justifyContent","alignItems","flexDirection","gap"],"sourceRoot":""}